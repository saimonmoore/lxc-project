#!/usr/bin/env bash

show_help() {
cat << EOF
Usage: ${0##*/} [-h] [-n project_name] [-d distro] [-a arch] [-r recipe]

Generates an dev environment within an lxc container

      -h Display this help
      -n Project Name
      -d Ubuntu distro to use (default: 16.04)
      -a Architecture for container (default: amd64)
      -r Ansible recipe to run (default: base)
EOF
}

OPTIND=1
while getopts "hn:d:a:r:" opt; do
  case "$opt" in
    h)
      show_help
      exit 0
      ;;
    n)
      export PROJECT_NAME=$OPTARG
      ;;
    d)
      export DISTRO=$OPTARG
      ;;
    a)
      export ARCH=$OPTARG
      ;;
    r)
      export ANSIBLE_RECIPE=$OPTARG
      ;;
    '?')
      show_help >&2
      exit 1
      ;;
  esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

[ ${#DEBUG} -gt 0 ] && set -x

if [ -z $PROJECT_NAME ]
then
  show_help
  exit 1
fi

set -e

: ${RCFILE:='.devenvrc'}
: ${DISTRO:='xenial'}
: ${ARCH:='amd64'}
: ${ANSIBLE_RECIPE:='base'}

function read_conf_option() {
  local option_name=$1
  local default_value=$2
  local option_value=''

  option_value=$(grep "^$option_name " ${RCFILE} | sed "s/$option_name *//")

  echo "${option_value:=$default_value}"
}

PROJECT = $1

if [[ -z "${PROJECT}" ]]; then
  echo -e "\033[31mProject name not supplied! Usage: create-lxc-project {project-name}\e[0m" && exit 1
fi


echo -e "
  _____________________________
< Welcome to \033[31m$USER\e[0m devenv! >
 -----------------------------
  \\
   \\
       __
      UooU\.'@@@@@@\`.
      \\__/(@@@@@@@@@@)
           (@@@@@@@@)
           \`YY~~~~YY'
            ||    ||

Let's get started!
"

# Initial checks
if ! [ -x "$(which ansible)" ]; then
  echo -e "\033[31mansible not found!\e[0m" && exit 1
fi

# Initial checks
if ! [ -x "$(which lxc-create)" ]; then
  echo -e "\033[31mlxc not found!\e[0m" && exit 1
fi

# Initial checks
if [[ $(id -u) -ne "1000" ]]; then
  echo -e "\033[31mYou are going to have problems with ids... Use a standard uid" && exit 1
fi

# Initial checks
if [[ ! -e "${RCFILE}" ]]; then
  echo -e "\033[31m${RCFILE} not found! Check this out! ${RCFILE}.example\e[0m" && exit 1
fi

CONTAINER=$PROJECT_NAME
CONTAINER_DISTRO=$DISTRO
CONTAINER_ARCH=amd64
CONTAINER_INTERFACE=$(read_conf_option "network_interface" "lxcbr0")

DOMAIN=$(read_conf_option "domain")

# Initial checks
if [[ ! -e "${DOMAIN}" ]]; then
  echo -e "\033[31m${DOMAIN} not found!\e[0m" && exit 1
fi

EXTRA_MOUNTS=$(read_conf_option "mount" | uniq)

# Mounting extra definitions
while read MOUNT_DEF; do
  eval MOUNT_PATH=$(echo ${MOUNT_DEF} | cut -d" " -f 1)

  if [[ -d ${MOUNT_PATH} ]]; then
    MOUNT_TYPE='dir'
  elif [[ -f ${MOUNT_PATH} ]]; then
    MOUNT_TYPE='file'
  else
    echo "WARNING: ${MOUNT_PATH} mount definition not found!!!!!!"
  fi

  MOUNT_POINT=$(echo "${MOUNT_DEF}" | cut -d" " -f 2 | sed 's/~/\/home\/ubuntu/')
  MOUNT_POINT="/var/lib/lxc/${CONTAINER}/rootfs${MOUNT_POINT}"
  MOUNT_ENTRIES="${MOUNT_ENTRIES}lxc.mount.entry = ${MOUNT_PATH} ${MOUNT_POINT} none bind.ro,create=${MOUNT_TYPE} 0.0\n"
done <<< "${EXTRA_MOUNTS}"

MOUNT_ENTRIES=$(echo -ne "$MOUNT_ENTRIES")

#TODO look for interface br0, ask for it if not found

# Creating container configuration
cat <<EOF > /tmp/${CONTAINER}.conf

# Network configuration
lxc.network.type = veth
lxc.network.link = ${CONTAINER_INTERFACE}
lxc.network.flags = up

# Shared directories
${MOUNT_ENTRIES}
EOF

# Creates a Ubuntu container
echo -e "\nCreating container... (we need sudo)"
sudo lxc-create -n ${CONTAINER} -f /tmp/${CONTAINER}.conf -t /usr/share/lxc/templates/lxc-ubuntu -- --release ${CONTAINER_DISTRO} --arch ${CONTAINER_ARCH}

# Starts the container
sudo lxc-start -d -n ${CONTAINER}

# Let the container start
sudo lxc-wait -n ${CONTAINER} -s RUNNING

ip_retries=0
while [[ -z ${IP} ]] && [[ $ip_retries -le 5 ]]; do
  echo "Waiting for container to obtain IP ..."
  sleep 5
  IP=$(sudo lxc-ls --fancy ${CONTAINER} | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
  ip_retries=$((ip_retries + 1))
done

if [ -z "${IP}" ]; then
  echo "Unable to start the '${CONTAINER}' container! ;("
  exit
fi

echo "Your container up and running in ${IP}..."

# Install python inside the container
sudo lxc-attach -n ${CONTAINER} -- sudo apt install -y python2.7

# Change main password for ubuntu user
sudo lxc-attach -n ${CONTAINER} -- bash -c 'echo "ubuntu:ubuntu" | chpasswd'

# Copies you public key inside the container
if [ -f "$HOME/.ssh/id_rsa.pub" ]; then
  ssh-keyscan -H "${IP}" >> "$HOME/.ssh/known_hosts"

  echo "Setting ubuntu password. Please type: 'ubuntu'"
  ssh-copy-id -i "${HOME}/.ssh/id_rsa.pub" "ubuntu@${IP}"
fi

# Adding new container to ansible hosts file
echo "Adding new host to ansible hosts file..."
cat <<EOF > ./hosts
[${CONTAINER}]
${IP}
EOF

# Adding new container ip to etc hosts file
grep "$DOMAIN" /etc/hosts > /dev/null
RESULT=$?
if [ $RESULT -ne 0 ]; then
  sudo echo -e "\n${IP} ${DOMAIN}" | sudo tee -a /etc/hosts
else
  sudo sed -i "s/.*${DOMAIN}.*/${IP}\t${DOMAIN}/g" /etc/hosts
fi
